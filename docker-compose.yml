services:
  postgres:
    image: postgres
    restart: always
    container_name: entrenia-postgres
    env_file:
      - .env
    volumes:
      - postgres-db:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - internal

  backend:
    image: entrenia-backend
    pull_policy: never
    container_name: entrenia-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - 127.0.0.1:8000:8000
    env_file:
      - .env
    volumes:
      - media-data:/app/media
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      rabbitmq:
        condition: service_healthy
      init-media:
        condition: service_completed_successfully
    environment:
      - APP_NAME=${APP_NAME?Variable not set}
      - APP_DESCRIPTION=${APP_DESCRIPTION?Variable not set}
      - APP_CONTACT_NAME=${APP_CONTACT_NAME?Variable not set}
      - APP_CONTACT_EMAIL=${APP_CONTACT_EMAIL?Variable not set}
      - CORS_ORIGINS=${CORS_ORIGINS?Variable not set}
      - API_PREFIX=${API_PREFIX?Variable not set}
      - POSTGRES_SERVER=${POSTGRES_SERVER?Variable not set}
      - POSTGRES_USER=${POSTGRES_USER?Variable not set}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD?Variable not set}
      - POSTGRES_DB=${POSTGRES_DB?Variable not set}
      - POSTGRES_URL=${POSTGRES_URL?Variable not set}
      - FIRST_ADMIN_USERNAME=${FIRST_ADMIN_USERNAME?Variable not set}
      - FIRST_ADMIN_PASSWORD=${FIRST_ADMIN_PASSWORD?Variable not set}
      - FIRST_ADMIN_EMAIL=${FIRST_ADMIN_EMAIL?Variable not set}
      - ACCESS_TOKEN_EXPIRE=${ACCESS_TOKEN_EXPIRE?Variable not set}
      - PASSWORD_RESET_TOKEN_EXPIRE=${PASSWORD_RESET_TOKEN_EXPIRE?Variabe not set}
      - SECRET_KEY=${SECRET_KEY?Variable not set}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY?Variable not set}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL?Variable not set}
      - LANDING_FRONTEND_URL=${LANDING_FRONTEND_URL?Variable not set}
      - PASSWORD_RESET_FRONTEND_URL=${PASSWORD_RESET_FRONTEND_URL?Variable not set}
      - MEDIA_ROOT=${MEDIA_ROOT?Variable not set}
    networks:
      - internal
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000${API_PREFIX}/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 15s

  frontend:
    image: entrenia-frontend
    pull_policy: never
    container_name: entrenia-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_BACKEND_URL=${VITE_BACKEND_URL?Variable not set}
    volumes:
      - ./frontend/nginx-setup.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    ports:
      - 80:80
      - 443:443
    env_file: 
      - .env
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - internal
      - web
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbit-server
    ports:
      - 127.0.0.1:8080:15672
      - 127.0.0.1:5672:5672
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - internal
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  worker:
    image: entrenia-worker
    pull_policy: never
    container_name: entrenia-worker
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    env_file:
      - .env
    volumes:
      - media-data:/app/media
    depends_on:
      rabbitmq:
        condition: service_healthy
      init-media:
        condition: service_completed_successfully
    environment:
      - BROKER_URL=${BROKER_URL?Variable not set}
      - POSTGRES_URL=${POSTGRES_URL?Variable not set}
      - MEDIA_ROOT=${MEDIA_ROOT?Variable not set}
    networks:
      - internal
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.tasks.celery_app inspect ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
  init-media:
    image: busybox
    container_name: entrenia-media-init
    volumes:
      - media-data:/app/media
    command: >
      sh -c "mkdir -p /app/media/models && 
             chown -R 65534:65534 /app/media && 
             chmod -R 770 /app/media && 
             echo 'Permisos establecidos correctamente para directorios de medios.'"
    restart: "no"
    networks:
      - internal
      
volumes:
  postgres-db:
  media-data:
  rabbitmq-data:

networks:
  internal:
    driver: bridge
  web:
    driver: bridge
